#!/bin/bash

CONFIG_DIR="$HOME/.config/dotkeep"
CONFIG_FILE="$CONFIG_DIR/dotkeep.conf"
BACKUP_DIR="$CONFIG_DIR/dotfiles"

GIT_AUTO_PUSH=false
DOTKEEP_COMMIT_MESSAGE="dotkeep: update at $(date +"%Y-%m-%d %H:%M:%S")"

mkdir -p "$BACKUP_DIR" "$CONFIG_DIR"

# If a config file doesn't exist, create a blank one and exit
if [[ ! -f "$CONFIG_FILE" ]]; then
   cat > "$CONFIG_FILE" <<'EOF'
# dotkeep configuration file

# Git settings
GIT_AUTO_PUSH=false
DOTKEEP_COMMIT_MESSAGE="dotkeep: updated at \$(date +"%Y-%m-%d %H:%M:%S")"

# Add the paths of files/directories you want to back up here

EOF

    echo "dotkeep: Created default config at ${CONFIG_FILE/#$HOME/\~}"
fi

if ! command -v rsync >/dev/null 2>&1; then
    echo -e "\e[31m✘\e[0m Error: dotkeep requires \'rsync\' to run. Please install it first."
    exit 1
fi

# ---- Parse config ----
FILES_TO_BACKUP=()

while IFS= read -r line || [[ -n "$line" ]]; do
    line="$(echo "$line" | xargs)" # trim whitespace
    [[ -z "$line" || "$line" == \#* ]] && continue # skip empty or comment lines

    # If line is a config variable
    if [[ "$line" == *=* ]]; then
        key="${line%%=*}"
        val="${line#*=}"
        val="${val%\"}"
        val="${val#\"}"
        key="$(echo "$key" | xargs)"
        case "$key" in
            GIT_AUTO_PUSH) GIT_AUTO_PUSH="$val" ;;
            DOTKEEP_COMMIT_MESSAGE) DOTKEEP_COMMIT_MESSAGE="$val" ;;
            *) echo "Warning: Unknown config key "$key"" ;;
        esac
    else
        FILES_TO_BACKUP+=("$line")
    fi
done < "$CONFIG_FILE"

GIT_COMMIT_MESSAGE=$(eval "echo \"$DOTKEEP_COMMIT_MESSAGE\"")

for filepath in "${FILES_TO_BACKUP[@]}"; do
    expanded_path="${filepath/#\~/$HOME}"
    expanded_path="${expanded_path/#$HOME/$HOME}"

    relative_path="${expanded_path#$HOME/}"
    target_path="$BACKUP_DIR/$relative_path"

    display_path="~/${relative_path}"
    target_display_path="${target_path/#$HOME/\~}"

    if [[ -e "$expanded_path" ]]; then
        mkdir -p "$(dirname "$target_path")"

        if [[ -d "$expanded_path" ]]; then
            rsync -a "$expanded_path/" "$target_path"
        else
            rsync -a "$expanded_path" "$target_path"
        fi

        if [[ $? -eq 0 ]]; then
            echo -e "\e[32m✔\e[0m Success: backed up: $display_path ➜  $target_display_path"
        else 
            echo -e "\e[31m✘\e[0m Error: failed to back up: $display_path"
        fi
    fi
done

if [[ "$GIT_AUTO_PUSH" == true ]]; then
    if [[ -d "$CONFIG_DIR/.git" ]]; then
        git -C "$CONFIG_DIR" add .
        git -C "$CONFIG_DIR" commit -m "$GIT_COMMIT_MESSAGE"
        git -C "$CONFIG_DIR" push
    else
        echo -e "\e[31m✘\e[0m Error: Git auto-push is enabled "$CONFIG_DIR" is not a Git repository."
        echo "To initialize it, run:"
        echo "cd $CONFIG_DIR && git init && git remote add origin <your-repo-url>"
    fi
fi

echo -e "\e[32m✔\e[0m Backup complete!"
